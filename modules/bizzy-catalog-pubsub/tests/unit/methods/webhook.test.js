'use strict';

const Promise = require('bluebird');
const test = require('ava');
const sinon = require('sinon');
const {
    BizzyError
} = require('bizzy-common');
const method = require('../../../src/methods/webhook');
const generalConfig = require('../../../src/repositories/general_configuration_repo');
const skuMappingJob = require('../../../src/repositories/product_sku_mapping_job_repo');
const skuMapping = require('../../../src/repositories/product_sku_mapping_repo');
const catalogPubsubService = require('../../../src/repositories/catalog_pubsub_service_repo');

const content = ''

test.serial('upsertProductSkuMapping SUCCESS done, no job to be processed', async (t) => {
    t.context.sandbox.stub(generalConfig, 'findOne').resolves();
    t.context.sandbox.stub(skuMappingJob, 'findOneGeneralCriteria').resolves(null);

    try {
        const result = await method.upsertProductSkuMapping({ id: '123ppp' }, {});
        t.is(result, 'success-done');
    } catch (err) {
        t.fail(err.stack);
    }
});

test.serial('upsertProductSkuMapping SUCCESS type add', async (t) => {
    t.context.sandbox.stub(generalConfig, 'findOne').resolves({ product_sku_mapping_job_concurrency: 10 });
    t.context.sandbox.stub(skuMappingJob, 'findOneGeneralCriteria').resolves({ content, status: 10, type: 'add' });
    t.context.sandbox.stub(skuMapping, 'syncProductSkuMapping').resolves();
    t.context.sandbox.stub(skuMappingJob, 'updateOne').resolves();
    t.context.sandbox.stub(catalogPubsubService, 'upsertProductSkuMapping').resolves();

    try {
        const result = await method.upsertProductSkuMapping({ id: '123ppp' }, {});
        t.is(result, 'success');
    } catch (err) {
        t.fail(err.stack);
    }
});

test.serial('upsertProductSkuMapping ERROR', async (t) => {
    t.context.sandbox.stub(generalConfig, 'findOne').resolves({ product_sku_mapping_job_concurrency: 10 });
    t.context.sandbox.stub(skuMappingJob, 'findOneGeneralCriteria').resolves({ content, status: 10, type: 'add' });
    t.context.sandbox.stub(skuMapping, 'syncProductSkuMapping').resolves();
    t.context.sandbox.stub(skuMappingJob, 'updateOne').resolves();
    t.context.sandbox.stub(catalogPubsubService, 'upsertProductSkuMapping').throws(new Error('error'));

    try {
        await method.upsertProductSkuMapping({ id: '123ppp' }, {});
        t.fail('should error');
    } catch (err) {
        t.is(err.message, 'error');
    }
});

test.serial('upsertProductSkuMapping SUCCESS type remove', async (t) => {
    t.context.sandbox.stub(generalConfig, 'findOne').resolves({ product_sku_mapping_job_concurrency: 10 });
    t.context.sandbox.stub(skuMappingJob, 'findOneGeneralCriteria').resolves({ content, status: 10, type: 'remove' });
    t.context.sandbox.stub(skuMapping, 'deleteManyProductMapping').resolves();
    t.context.sandbox.stub(skuMappingJob, 'updateOne').resolves();
    t.context.sandbox.stub(catalogPubsubService, 'upsertProductSkuMapping').resolves();

    try {
        const result = await method.upsertProductSkuMapping({ id: '123ppp' }, {});
        t.is(result, 'success');
    } catch (err) {
        t.fail(err.stack);
    }
});

test.before('Initialize Bizzy Error', function* before(t) {
    BizzyError.initializeErrors();
});

test.beforeEach('Initialize New Sandbox Before Each Test', function* beforeEach(t) {
    t.context.sandbox = sinon.sandbox.create().usingPromise(Promise.Promise);
});

test.afterEach.always('Restore Sandbox and Configuration After Each Test', function* afterEach(t) {
    t.context.sandbox.restore();
});
